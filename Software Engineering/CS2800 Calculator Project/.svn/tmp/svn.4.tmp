import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import calc.BadTypeException;
import calc.EmptyStackException;
import calc.NumStack;

/**
 * 
 */

/**
 * The Test Number Stack class which used JUnit to test the NumStack class.
 * @author Piravin Satkunarajah
 */
public class TestNumStack {
    
    /**
     * An object of the NumStack class
     */
    
    private NumStack nu; //Created NumStack class

    /**
     * The setUp function
     */
    @Before
    public void setUp() {
        nu = new NumStack();
    }

    /**
     * TEST1 tests the push and pop method in the NumStack class.
     * This checks if you can return the value you have just pushed into
     * the stack.
     * @throws BadTypeException 
     * @throws EmptyStackException 
     */
    @Test
    public void pushThenPop() throws EmptyStackException, BadTypeException {
        nu.push(2f);
        assertEquals("TEST1: Push then Pop", 2f, nu.pop(), 0.001);
        //Created push method.
        //Complies but returns wrong result.
        //Test succeeded by changing return value from 0 to 2f.
    }
    
    /**
     * TEST2 tests the isEmpty method in the NumStack class.
     * This checks if there's no elements in the Stack then isEmpty would be true
     * and false if it isn't.
     */
    @Test
    public void pushThenisEmpty() {
        nu.push(4.2f);
        assertEquals("TEST2: Push then isEmpty", false, nu.isEmpty());
        //Created isEmpty method.
        //Complies but returns wrong result
        //Test succeeded by changing return value from true to false.
    }
    
    /**
     * TEST3 tests the pop method in the NumStack class.
     * This checks if you can pop the last element popped into the stack.
     * @throws BadTypeException 
     * @throws EmptyStackException 
     */
    @Test
    public void pushThenPushThenPop() throws EmptyStackException, BadTypeException{
        nu.push(2.3f);
        nu.push(3.2f);
        assertEquals("TEST3: Push then Push then Pop", 3.2f, nu.pop(), 0.001);
        //Complies but returns wrong result: 2.0.
        //Test succeeded by calling the push method from the Stack class in push
        //and calling the pop method from the Stack in pop
    }
    
    /**
     * TEST4 does the same test as TEST2 but with no elements in the stack.
     */
    @Test
    public void isEmpty() {
        assertEquals("TEST4: isEmpty", true, nu.isEmpty());
        //Complies but isEmpty returns false
        //Test succeeded by calling the size method from the Stack class in isEmpty
    }
   
}
